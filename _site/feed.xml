<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-16T18:25:33+10:00</updated><id>http://localhost:4000/</id><title type="html">The PeopleSoft Experience</title><subtitle>Musings, chit-chat, and sometimes useful stuff related to PeopleSoft, especially PeopleCode.</subtitle><entry><title type="html">First Jekyll Post.</title><link href="http://localhost:4000/jekyll/update/2018/06/16/first-jekyll-post.html" rel="alternate" type="text/html" title="First Jekyll Post." /><published>2018-06-16T16:35:58+10:00</published><updated>2018-06-16T16:35:58+10:00</updated><id>http://localhost:4000/jekyll/update/2018/06/16/first-jekyll-post</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/06/16/first-jekyll-post.html">&lt;p&gt;This is a first jekyll post.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;WinMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; bottles of beer on the wall...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How’s that?&lt;/p&gt;

&lt;p&gt;last change.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is a first jekyll post.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/06/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-06-16T16:23:58+10:00</published><updated>2018-06-16T16:23:58+10:00</updated><id>http://localhost:4000/jekyll/update/2018/06/16/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/06/16/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Quirky Shortcuts</title><link href="http://localhost:4000/2018/05/08/quirky-shortcuts.html" rel="alternate" type="text/html" title="Quirky Shortcuts" /><published>2018-05-08T13:31:19+10:00</published><updated>2018-05-08T13:31:19+10:00</updated><id>http://localhost:4000/2018/05/08/quirky-shortcuts</id><content type="html" xml:base="http://localhost:4000/2018/05/08/quirky-shortcuts.html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I guess it’s obvious now I was primed for &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882?SubscriptionId=AKIAILSHYYTFIVPWUY6Q&amp;amp;tag=duckduckgo-osx-20&amp;amp;linkCode=xm2&amp;amp;camp=2025&amp;amp;creative=165953&amp;amp;creativeASIN=0132350882&quot;&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve been using the methods outlined in this book for a couple of weeks now. Everything is so much better now. I feel like I only have to use half my brain all day.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Some quirky little ways of writing things I’ve been doing lately. I don’t use them all the time because they can be harder to parse, but interesting nonetheless.&lt;/p&gt;

&lt;p&gt;#If-Then-Else in 1 line.&lt;/p&gt;

&lt;p&gt;If setting a boolean value via an If-Then-Else statement you can often do it in one line.&lt;/p&gt;

&lt;p&gt;Standard:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelperObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IsSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SOME_FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Else&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SOME_FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quirky Shortcut:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;SOME_FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelperObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IsSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yeah. Nah. I reckon that is easier to parse than the standard way.&lt;/p&gt;

&lt;p&gt;#Using Properties of a Returned Object&lt;/p&gt;

&lt;p&gt;What?&lt;/p&gt;

&lt;p&gt;Let’s say you have a method that returns an array:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GetStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can use GetStuff.Len, for example. The property of the array itself. Direct-like.&lt;/p&gt;

&lt;p&gt;Standard:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelperObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GetStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FIELD_COUNT_STUFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quirky Shortcut:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;FIELD_COUNT_STUFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HelperObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GetStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, I reckon that’s actually easier for the brain to parse.
¯_(ツ)_/¯&lt;/p&gt;</content><author><name></name></author><summary type="html">Update: I guess it’s obvious now I was primed for Clean Code</summary></entry><entry><title type="html">Prompts, Views &amp;amp; PeopleSoft 101.</title><link href="http://localhost:4000/2018/05/03/prompts-views-peoplesoft-101.html" rel="alternate" type="text/html" title="Prompts, Views &amp; PeopleSoft 101." /><published>2018-05-03T17:34:57+10:00</published><updated>2018-05-03T17:34:57+10:00</updated><id>http://localhost:4000/2018/05/03/prompts-views-peoplesoft-101</id><content type="html" xml:base="http://localhost:4000/2018/05/03/prompts-views-peoplesoft-101.html">&lt;blockquote&gt;A beginning is the time for taking the most delicate care that the balances are correct. - Dune&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Frankly, I've forgotten the beginning. I'm sure I could balance it all at one time, twenty years ago, but it seems I can't balance page levels, prompts, their views, and related displays any more. I've spent so long in Application Engines, Integration Broker, SQL tuning, OOP, and all the other things that I've forgotten how to do basic stuff on basic pages; PeopleSoft 101.&lt;/p&gt;
&lt;p&gt;So I'm writing this down for the next time I forget.&lt;/p&gt;
&lt;p&gt;Here is a Record:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-481&quot; src=&quot;/assets/screen-shot-2018-05-03-at-7-12-56-pm.png&quot; alt=&quot;Screen Shot 2018-05-03 at 7.12.56 pm&quot; width=&quot;773&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Fields 1 - 5 are keys.&lt;br /&gt;
The last field has a &lt;strong&gt;prompt&lt;/strong&gt;, to this Record:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-482&quot; src=&quot;/assets/screen-shot-2018-05-03-at-7-00-25-pm.png&quot; alt=&quot;Screen Shot 2018-05-03 at 7.00.25 pm&quot; width=&quot;783&quot; height=&quot;291&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The prompt will auto fill and make display only all the values for its keys that it finds in the buffer. In this case institution, strm, session_code and scent_combined_id.&lt;/p&gt;
&lt;p&gt;The fields must be defined as a key for this to work, even thought it's just a view.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think %Join(common_keys, ...)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So when we use the prompt:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-483&quot; src=&quot;/assets/screen-shot-2018-05-03-at-7-19-55-pm.png&quot; alt=&quot;Screen Shot 2018-05-03 at 7.19.55 pm&quot; width=&quot;470&quot; height=&quot;452&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We see the four key values copied (joined) from the buffer.&lt;/p&gt;
&lt;p&gt;Now, if you wanted to, for what ever reason, have strm as a value the user can enter make it an Alternate Search Key instead. The result is you can now search on strm; it is no longer filled in automagically from the buffer.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-484&quot; src=&quot;/assets/screen-shot-2018-05-03-at-7-25-40-pm.png&quot; alt=&quot;Screen Shot 2018-05-03 at 7.25.40 pm&quot; width=&quot;501&quot; height=&quot;308&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The other thing I stumbled on was the value that is actually &lt;em&gt;returned&lt;/em&gt; to the Field with the prompt; the value you are searching for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The last key is the value returned.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you look at the prompt record again you'll see I've set it as ssr_activity_id. This is what is returned; the last key in the record definition.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">A beginning is the time for taking the most delicate care that the balances are correct. - Dune Frankly, I've forgotten the beginning. I'm sure I could balance it all at one time, twenty years ago, but it seems I can't balance page levels, prompts, their views, and related displays any more. I've spent so long in Application Engines, Integration Broker, SQL tuning, OOP, and all the other things that I've forgotten how to do basic stuff on basic pages; PeopleSoft 101. So I'm writing this down for the next time I forget. Here is a Record: Fields 1 - 5 are keys. The last field has a prompt, to this Record: The prompt will auto fill and make display only all the values for its keys that it finds in the buffer. In this case institution, strm, session_code and scent_combined_id. The fields must be defined as a key for this to work, even thought it's just a view. Think %Join(common_keys, ...) So when we use the prompt: We see the four key values copied (joined) from the buffer. Now, if you wanted to, for what ever reason, have strm as a value the user can enter make it an Alternate Search Key instead. The result is you can now search on strm; it is no longer filled in automagically from the buffer. The other thing I stumbled on was the value that is actually returned to the Field with the prompt; the value you are searching for. The last key is the value returned. If you look at the prompt record again you'll see I've set it as ssr_activity_id. This is what is returned; the last key in the record definition. &amp;nbsp; &amp;nbsp; &amp;nbsp;</summary></entry><entry><title type="html">How to Hide and Display Rows in the Current Context</title><link href="http://localhost:4000/2018/03/01/how-to-hide-and-display-rows-in-the-current-context.html" rel="alternate" type="text/html" title="How to Hide and Display Rows in the Current Context" /><published>2018-03-01T14:17:01+11:00</published><updated>2018-03-01T14:17:01+11:00</updated><id>http://localhost:4000/2018/03/01/how-to-hide-and-display-rows-in-the-current-context</id><content type="html" xml:base="http://localhost:4000/2018/03/01/how-to-hide-and-display-rows-in-the-current-context.html">&lt;p&gt;Surprise, you &lt;strong&gt;can&lt;/strong&gt; hide rows in the current context of the executing program.&lt;/p&gt;
&lt;p&gt;What you need to do is trigger code on a higher level, but how can you do that? The answer is the SetDefault() method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basically: Put a Field on Level 0 and call its &lt;em&gt;.SetDefault()&lt;/em&gt; method to trigger its .FieldDefault() PeopleCode.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's a simple example. This is a dummy page containing a grid on level 1 that has a 'hide' button against each row. The important pieces to the puzzle are circled; a derived field on level 0 to hold the row_number we want to hide, and another to trigger the code to hide it... &lt;em&gt;from level 0.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-469&quot; src=&quot;/assets/capture15.png&quot; alt=&quot;Capture1&quot; width=&quot;513&quot; height=&quot;241&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The code under the 'Hide' button:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-470&quot; src=&quot;/assets/capture16.png&quot; alt=&quot;Capture1&quot; width=&quot;562&quot; height=&quot;79&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The call to .SetDefault() triggers code up on level 0. Outside the current context, from the current context : )&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-471&quot; src=&quot;/assets/capture17.png&quot; alt=&quot;Capture1&quot; width=&quot;584&quot; height=&quot;111&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We've stored the CurrentRowNumber() of the row where we clicked the 'Hide' button, so the code simply hides that row in level 1.&lt;/p&gt;
&lt;p&gt;Here it is working:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-472&quot; src=&quot;/assets/capture18.png&quot; alt=&quot;Capture1&quot; width=&quot;534&quot; height=&quot;327&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And now we hide rows 1, 3 and 4:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-473&quot; src=&quot;/assets/capture19.png&quot; alt=&quot;Capture1&quot; width=&quot;527&quot; height=&quot;245&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">Surprise, you can hide rows in the current context of the executing program. What you need to do is trigger code on a higher level, but how can you do that? The answer is the SetDefault() method. Basically: Put a Field on Level 0 and call its .SetDefault() method to trigger its .FieldDefault() PeopleCode. Here's a simple example. This is a dummy page containing a grid on level 1 that has a 'hide' button against each row. The important pieces to the puzzle are circled; a derived field on level 0 to hold the row_number we want to hide, and another to trigger the code to hide it... from level 0. The code under the 'Hide' button: The call to .SetDefault() triggers code up on level 0. Outside the current context, from the current context : ) We've stored the CurrentRowNumber() of the row where we clicked the 'Hide' button, so the code simply hides that row in level 1. Here it is working: And now we hide rows 1, 3 and 4:</summary></entry><entry><title type="html">FizzBuzz in Python</title><link href="http://localhost:4000/2017/09/28/fizzbuzz-in-python.html" rel="alternate" type="text/html" title="FizzBuzz in Python" /><published>2017-09-28T13:31:30+10:00</published><updated>2017-09-28T13:31:30+10:00</updated><id>http://localhost:4000/2017/09/28/fizzbuzz-in-python</id><content type="html" xml:base="http://localhost:4000/2017/09/28/fizzbuzz-in-python.html">&lt;p&gt;FizzBuzz is a simple exercise and a nice illustration of how to refactor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version 1&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def fizzbuzz(fizz, buzz, r):

    for i in range(0, r+1):
        result= ''
        if i % fizz == 0:
            result = 'Fizz'
        if i % buzz == 0:
            result += 'Buzz'

    print(str(i) + ': ' + result)


fizzbuzz( 3, 5, 100 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Version 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And after the mandatory &quot;What if I want to buzz on 7, and also wizz on 9, etc.?&quot;. The function is now refactored to take a dictionary of any number of fizz, buzz, wizz, whatevers to look for.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def fizzbuzz2(searchDict, r):

    for i in range(1, r+1):
        result= ''
        for j in range(0, len(searchDict)):
            if i % searchDict[j]['Number'] == 0:
            result += searchDict[j]['Reply']

        print(str(i) + ': ' + result)


arrDict = [
    {'Number': 3, 'Reply': 'Fizz'},
    {'Number': 5, 'Reply': 'Buzz'},
    {'Number': 9, 'Reply': 'Wizz'}]

fizzbuzz2(arrDict, 100 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">FizzBuzz is a simple exercise and a nice illustration of how to refactor. Version 1 def fizzbuzz(fizz, buzz, r):</summary></entry><entry><title type="html">The Equivalent of DESCR in DB2</title><link href="http://localhost:4000/2017/09/12/the-equivalent-of-descr-in-db2.html" rel="alternate" type="text/html" title="The Equivalent of DESCR in DB2" /><published>2017-09-12T09:12:44+10:00</published><updated>2017-09-12T09:12:44+10:00</updated><id>http://localhost:4000/2017/09/12/the-equivalent-of-descr-in-db2</id><content type="html" xml:base="http://localhost:4000/2017/09/12/the-equivalent-of-descr-in-db2.html">&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;typ&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; distinct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;typ&quot;&gt;ColType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;typ&quot;&gt;Length&lt;/span&gt; 
&lt;span class=&quot;kwd&quot;&gt;from&lt;/span&gt; s&lt;span class=&quot;typ&quot;&gt;ysibm&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;syscolumns 
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; tbname &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;'employee'&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">Select distinct(name), ColType, Length from sysibm.syscolumns where tbname = 'employee';</summary></entry><entry><title type="html">Code.org</title><link href="http://localhost:4000/2017/03/10/code-org.html" rel="alternate" type="text/html" title="Code.org" /><published>2017-03-10T03:32:28+11:00</published><updated>2017-03-10T03:32:28+11:00</updated><id>http://localhost:4000/2017/03/10/code-org</id><content type="html" xml:base="http://localhost:4000/2017/03/10/code-org.html">&lt;p&gt;Hello code.org :)&lt;/p&gt;
&lt;p&gt;I've recently found code.org and they have an &lt;em&gt;amazing&lt;/em&gt; collection of code tutorials that you may already know of via their &lt;em&gt;one hour of code&lt;/em&gt; endeavour.&lt;/p&gt;
&lt;p&gt;But they also have a collection of Computer Science courses that are perfect for teaching bored kids about how stuff really works. I especially like their methodology of &quot;activity &amp;gt;  comprehension &amp;gt; vocabulary&quot;, or words to that effect. This has the students describing a problem, solving it, and then learning about what they just did. Essentially the students are &lt;em&gt;rediscovering&lt;/em&gt; the very foundations of computer science themselves. It's a much better approach than a dry lecture about words you are unfamiliar with.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.org&quot;&gt;https://code.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=Kn6Fd5uwZno&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">Hello code.org :) I've recently found code.org and they have an amazing collection of code tutorials that you may already know of via their one hour of code endeavour. But they also have a collection of Computer Science courses that are perfect for teaching bored kids about how stuff really works. I especially like their methodology of &quot;activity &amp;gt;  comprehension &amp;gt; vocabulary&quot;, or words to that effect. This has the students describing a problem, solving it, and then learning about what they just did. Essentially the students are rediscovering the very foundations of computer science themselves. It's a much better approach than a dry lecture about words you are unfamiliar with. https://code.org For example: https://www.youtube.com/watch?v=Kn6Fd5uwZno</summary></entry><entry><title type="html">Application Engine SQL Export</title><link href="http://localhost:4000/2016/11/16/application-engine-sql-export.html" rel="alternate" type="text/html" title="Application Engine SQL Export" /><published>2016-11-16T03:06:48+11:00</published><updated>2016-11-16T03:06:48+11:00</updated><id>http://localhost:4000/2016/11/16/application-engine-sql-export</id><content type="html" xml:base="http://localhost:4000/2016/11/16/application-engine-sql-export.html">&lt;p&gt;To export Application Engine SQL steps as plain text you can find the SQL stored in the pssqltextdefn table.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select 
  d.sqlid, d.descr
, s.sqltext
from 
  psaestmtdefn d
, pssqltextdefn s
where d.ae_applid = 'YOUR_APP_ENGINE_NAME'
and d.ae_stmt_type = 'S'
and s.sqlid = d.sqlid
;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use something like a combination of &lt;a href=&quot;http://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt; and the &lt;a href=&quot;https://packagecontrol.io/packages/SqlBeautifier&quot; target=&quot;new&quot;&gt;SQL Beautifier package&lt;/a&gt; to get some sort of SQL formatting going.&lt;/p&gt;
&lt;p&gt;Use markdown to indicate each SQL statement in your document ('#' for heading level 1).&lt;/p&gt;
&lt;p&gt;And then use &lt;a href=&quot;http://pandoc.org&quot; target=&quot;new&quot;&gt;Pandoc&lt;/a&gt; to convert from markdown to Word's docx format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    brew install pandoc
    pandoc -f markdown -t docx yourDocument.md -o yourDocument.docx
&lt;/code&gt;&lt;/pre&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">To export Application Engine SQL steps as plain text you can find the SQL stored in the pssqltextdefn table. select d.sqlid, d.descr , s.sqltext from psaestmtdefn d , pssqltextdefn s where d.ae_applid = 'YOUR_APP_ENGINE_NAME' and d.ae_stmt_type = 'S' and s.sqlid = d.sqlid ; You can then use something like a combination of Sublime Text and the SQL Beautifier package to get some sort of SQL formatting going. Use markdown to indicate each SQL statement in your document ('#' for heading level 1). And then use Pandoc to convert from markdown to Word's docx format. brew install pandoc pandoc -f markdown -t docx yourDocument.md -o yourDocument.docx</summary></entry><entry><title type="html">Programming Games</title><link href="http://localhost:4000/2016/08/25/programming-games.html" rel="alternate" type="text/html" title="Programming Games" /><published>2016-08-25T04:23:55+10:00</published><updated>2016-08-25T04:23:55+10:00</updated><id>http://localhost:4000/2016/08/25/programming-games</id><content type="html" xml:base="http://localhost:4000/2016/08/25/programming-games.html">&lt;p&gt;To be honest I'm not sure playing games that are so similar to actual work are fun, or relaxing, but they seem a good way to introduce people, your own children especially, to the concept of or concepts similar to coding. I much prefer more relaxing, problem-solving pursuits like &lt;a href=&quot;http://67.media.tumblr.com/tumblr_lkvl17wsJa1qhi56lo1_500.jpg&quot;&gt;Muay Thai&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;TIS-100&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zachtronics.com/tis-100&quot;&gt;http://www.zachtronics.com/tis-100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-large wp-image-398&quot; src=&quot;/assets/bnuipgp.png?w=1024&quot; alt=&quot;bnuipgp&quot; width=&quot;1024&quot; height=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;TIS-100 is an open-ended programming game by Zachtronics, the creators of SpaceChem and Infinifactory, in which you rewrite corrupted code segments to repair the TIS-100 and unlock its secrets. It’s the assembly language programming game you never asked for!&lt;/p&gt;
&lt;h3&gt;Cube Composer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://david-peter.de/cube-composer&quot;&gt;http://david-peter.de/cube-composer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-407&quot; src=&quot;/assets/cqk1cx6xaaeobhz.png&quot; alt=&quot;cqk1cx6xaaeobhz&quot; width=&quot;600&quot; height=&quot;440&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A puzzle game which is inspired by functional programming methods. In a number of different levels, your task is to compose a series of transformations such that the colored cubes arrange in the correct pattern.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name>{&quot;login&quot;=&gt;&quot;evlpanda&quot;, &quot;email&quot;=&gt;&quot;m.nitschke@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;Michael Nitschke&quot;, &quot;first_name&quot;=&gt;&quot;&quot;, &quot;last_name&quot;=&gt;&quot;&quot;}</name><email>m.nitschke@gmail.com</email></author><summary type="html">To be honest I'm not sure playing games that are so similar to actual work are fun, or relaxing, but they seem a good way to introduce people, your own children especially, to the concept of or concepts similar to coding. I much prefer more relaxing, problem-solving pursuits like Muay Thai. TIS-100 http://www.zachtronics.com/tis-100 TIS-100 is an open-ended programming game by Zachtronics, the creators of SpaceChem and Infinifactory, in which you rewrite corrupted code segments to repair the TIS-100 and unlock its secrets. It’s the assembly language programming game you never asked for! Cube Composer http://david-peter.de/cube-composer A puzzle game which is inspired by functional programming methods. In a number of different levels, your task is to compose a series of transformations such that the colored cubes arrange in the correct pattern. &amp;nbsp; &amp;nbsp;</summary></entry></feed>